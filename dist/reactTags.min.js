(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("React"), require("ReactDOM"));
	else if(typeof define === 'function' && define.amd)
		define(["React", "ReactDOM"], factory);
	else if(typeof exports === 'object')
		exports["ReactTags"] = factory(require("React"), require("ReactDOM"));
	else
		root["ReactTags"] = factory(root["React"], root["ReactDOM"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var ReactDOM = __webpack_require__(2);
	var Tag = __webpack_require__(3);
	var Suggestions = __webpack_require__(4);

	// Constants
	var Keys = {
	    ENTER: 13,
	    TAB: 9,
	    BACKSPACE: 8,
	    UP_ARROW: 38,
	    DOWN_ARROW: 40,
	    ESCAPE: 27
	};

	var ReactTags = React.createClass({
	    displayName: 'ReactTags',

	    propTypes: {
	        tags: React.PropTypes.array,
	        placeholder: React.PropTypes.string,
	        labelField: React.PropTypes.string,
	        suggestions: React.PropTypes.array,
	        delimeters: React.PropTypes.array,
	        autofocus: React.PropTypes.bool,
	        inline: React.PropTypes.bool,
	        handleDelete: React.PropTypes.func.isRequired,
	        handleAddition: React.PropTypes.func.isRequired,
	        handleDrag: React.PropTypes.func.isRequired,
	        allowDeleteFromEmptyInput: React.PropTypes.bool,
	        handleInputChange: React.PropTypes.func,
	        minQueryLength: React.PropTypes.number,
	        removeComponent: React.PropTypes.func,
	        autocomplete: React.PropTypes.oneOfType([React.PropTypes.bool, React.PropTypes.number])
	    },
	    getDefaultProps: function getDefaultProps() {
	        return {
	            placeholder: 'Add new tag',
	            tags: [],
	            suggestions: [],
	            delimeters: [Keys.ENTER, Keys.TAB],
	            autofocus: true,
	            inline: true,
	            allowDeleteFromEmptyInput: true,
	            minQueryLength: 2,
	            autocomplete: false
	        };
	    },
	    componentDidMount: function componentDidMount() {
	        if (this.props.autofocus) {
	            this.refs.input.focus();
	        }
	    },
	    getInitialState: function getInitialState() {
	        return {
	            suggestions: this.props.suggestions,
	            query: "",
	            selectedIndex: -1,
	            selectionMode: false
	        };
	    },
	    filteredSuggestions: function filteredSuggestions(query, suggestions) {
	        return suggestions.filter(function (item) {
	            return item.toLowerCase().indexOf(query.toLowerCase()) === 0;
	        });
	    },
	    componentWillReceiveProps: function componentWillReceiveProps(props) {
	        var suggestions = this.filteredSuggestions(this.state.query, props.suggestions);
	        this.setState({
	            suggestions: suggestions
	        });
	    },

	    handleDelete: function handleDelete(i, e) {
	        this.props.handleDelete(i);
	        this.setState({ query: "" });
	    },
	    handleChange: function handleChange(e) {
	        if (this.props.handleInputChange) {
	            this.props.handleInputChange(e.target.value.trim());
	        }

	        var query = e.target.value.trim();
	        var suggestions = this.filteredSuggestions(query, this.props.suggestions);

	        this.setState({
	            query: query,
	            suggestions: suggestions
	        });
	    },
	    handleKeyDown: function handleKeyDown(e) {
	        var _state = this.state;
	        var query = _state.query;
	        var selectedIndex = _state.selectedIndex;
	        var suggestions = _state.suggestions;

	        // hide suggestions menu on escape
	        if (e.keyCode === Keys.ESCAPE) {
	            e.preventDefault();
	            this.setState({
	                selectedIndex: -1,
	                selectionMode: false,
	                suggestions: []
	            });
	        }

	        // When one of the terminating keys is pressed, add current query to the tags.
	        // If no text is typed in so far, ignore the action - so we don't end up with a terminating
	        // character typed in.
	        if (this.props.delimeters.indexOf(e.keyCode) !== -1) {
	            if (e.keyCode !== Keys.TAB || query !== "") {
	                e.preventDefault();
	            }

	            if (query !== "") {
	                if (this.state.selectionMode) {
	                    query = this.state.suggestions[this.state.selectedIndex];
	                }
	                this.addTag(query);
	            }
	        }

	        // when backspace key is pressed and query is blank, delete tag
	        if (e.keyCode === Keys.BACKSPACE && query == "" && this.props.allowDeleteFromEmptyInput) {
	            this.handleDelete(this.props.tags.length - 1);
	        }

	        // up arrow
	        if (e.keyCode === Keys.UP_ARROW) {
	            e.preventDefault();
	            var selectedIndex = this.state.selectedIndex;
	            // last item, cycle to the top
	            if (selectedIndex <= 0) {
	                this.setState({
	                    selectedIndex: this.state.suggestions.length - 1,
	                    selectionMode: true
	                });
	            } else {
	                this.setState({
	                    selectedIndex: selectedIndex - 1,
	                    selectionMode: true
	                });
	            }
	        }

	        // down arrow
	        if (e.keyCode === Keys.DOWN_ARROW) {
	            e.preventDefault();
	            this.setState({
	                selectedIndex: (this.state.selectedIndex + 1) % suggestions.length,
	                selectionMode: true
	            });
	        }
	    },
	    addTag: function addTag(tag) {
	        var input = this.refs.input;

	        if (this.props.autocomplete) {
	            var possibleMatches = this.filteredSuggestions(tag, this.props.suggestions);

	            if (this.props.autocomplete === 1 && possibleMatches.length === 1 || this.props.autocomplete === true) {
	                tag = possibleMatches[0];
	            }
	        }

	        // call method to add
	        this.props.handleAddition(tag);

	        // reset the state
	        this.setState({
	            query: "",
	            selectionMode: false,
	            selectedIndex: -1
	        });

	        // focus back on the input box
	        input.value = "";
	        input.focus();
	    },
	    handleSuggestionClick: function handleSuggestionClick(i, e) {
	        this.addTag(this.state.suggestions[i]);
	    },
	    handleSuggestionHover: function handleSuggestionHover(i, e) {
	        this.setState({
	            selectedIndex: i,
	            selectionMode: true
	        });
	    },
	    moveTag: function moveTag(id, afterId) {
	        var tags = this.props.tags;

	        // locate tags
	        var tag = tags.filter(function (t) {
	            return t.id === id;
	        })[0];
	        var afterTag = tags.filter(function (t) {
	            return t.id === afterId;
	        })[0];

	        // find their position in the array
	        var tagIndex = tags.indexOf(tag);
	        var afterTagIndex = tags.indexOf(afterTag);

	        // call handler with current position and after position
	        this.props.handleDrag(tag, tagIndex, afterTagIndex);
	    },
	    render: function render() {
	        var tagItems = this.props.tags.map((function (tag, i) {
	            return React.createElement(Tag, { key: tag.id,
	                tag: tag,
	                labelField: this.props.labelField,
	                onDelete: this.handleDelete.bind(this, i),
	                moveTag: this.moveTag,
	                removeComponent: this.props.removeComponent });
	        }).bind(this));

	        // get the suggestions for the given query
	        var query = this.state.query.trim(),
	            selectedIndex = this.state.selectedIndex,
	            suggestions = this.state.suggestions,
	            placeholder = this.props.placeholder;

	        var tagInput = React.createElement(
	            'div',
	            { className: 'ReactTags__tagInput' },
	            React.createElement('input', { ref: 'input',
	                type: 'text',
	                placeholder: placeholder,
	                'aria-label': placeholder,
	                onChange: this.handleChange,
	                onKeyDown: this.handleKeyDown }),
	            React.createElement(Suggestions, { query: query,
	                suggestions: suggestions,
	                selectedIndex: selectedIndex,
	                handleClick: this.handleSuggestionClick,
	                handleHover: this.handleSuggestionHover,
	                minQueryLength: this.props.minQueryLength })
	        );

	        return React.createElement(
	            'div',
	            { className: 'ReactTags__tags' },
	            React.createElement(
	                'div',
	                { className: 'ReactTags__selected' },
	                tagItems,
	                this.props.inline && tagInput
	            ),
	            !this.props.inline && tagInput
	        );
	    }
	});

	module.exports = {
	    WithOutContext: ReactTags,
	    Keys: Keys
	};

/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);

	var ItemTypes = { TAG: 'tag' };

	var Tag = React.createClass({
	  displayName: 'Tag',

	  propTypes: {
	    labelField: React.PropTypes.string,
	    onDelete: React.PropTypes.func.isRequired,
	    tag: React.PropTypes.object.isRequired,
	    moveTag: React.PropTypes.func.isRequired,
	    removeComponent: React.PropTypes.func
	  },
	  getDefaultProps: function getDefaultProps() {
	    return {
	      labelField: 'text'
	    };
	  },
	  render: function render() {
	    var label = this.props.tag[this.props.labelField];
	    var _props = this.props;
	    var isDragging = _props.isDragging;
	    var connectDropTarget = _props.connectDropTarget;

	    var CustomRemoveComponent = this.props.removeComponent;
	    var RemoveComponent = React.createClass({
	      displayName: 'RemoveComponent',

	      render: function render() {
	        if (CustomRemoveComponent) {
	          return React.createElement(CustomRemoveComponent, this.props);
	        }
	        return React.createElement(
	          'a',
	          this.props,
	          'x'
	        );
	      }
	    });

	    return React.createElement(
	      'span',
	      { className: 'ReactTags__tag' },
	      label,
	      React.createElement(RemoveComponent, { className: 'ReactTags__remove',
	        onClick: this.props.onDelete })
	    );
	  }
	});

	module.exports = Tag;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var React = __webpack_require__(1);

	var Suggestions = React.createClass({
	    displayName: "Suggestions",

	    propTypes: {
	        query: React.PropTypes.string.isRequired,
	        selectedIndex: React.PropTypes.number.isRequired,
	        suggestions: React.PropTypes.array.isRequired,
	        handleClick: React.PropTypes.func.isRequired,
	        handleHover: React.PropTypes.func.isRequired,
	        minQueryLength: React.PropTypes.number
	    },
	    markIt: function markIt(input, query) {
	        var escapedRegex = query.trim().replace(/[-\\^$*+?.()|[\]{}]/g, "\\$&");
	        var r = RegExp(escapedRegex, "gi");
	        return {
	            __html: input.replace(r, "<mark>$&</mark>")
	        };
	    },
	    render: function render() {
	        var props = this.props;
	        var suggestions = this.props.suggestions.map((function (item, i) {
	            return React.createElement(
	                "li",
	                { key: i,
	                    onClick: props.handleClick.bind(null, i),
	                    onMouseOver: props.handleHover.bind(null, i),
	                    className: i == props.selectedIndex ? "active" : "" },
	                React.createElement("span", { dangerouslySetInnerHTML: this.markIt(item, props.query) })
	            );
	        }).bind(this));

	        var minQueryLength = props.minQueryLength || 2;
	        if (suggestions.length === 0 || props.query.length < minQueryLength) {
	            return React.createElement(
	                "div",
	                { className: "ReactTags__suggestions" },
	                " "
	            );
	        }

	        return React.createElement(
	            "div",
	            { className: "ReactTags__suggestions" },
	            React.createElement(
	                "ul",
	                null,
	                " ",
	                suggestions,
	                " "
	            )
	        );
	    }
	});

	module.exports = Suggestions;

/***/ }
/******/ ])
});
;